{"version":3,"sources":["components/contactPicker/ContactPicker.js","components/appointmentForm/AppointmentForm.js","components/tile/Tile.js","components/tileList/TileList.js","containers/appointmentsPage/AppointmentsPage.js","components/contactForm/ContactForm.js","containers/contactsPage/ContactsPage.js","App.js","index.js"],"names":["ContactPicker","contacts","onChange","htmlFor","name","id","value","map","contact","contactName","phone","AppointmentForm","title","setTitle","setContact","date","setDate","time","setTime","handleSubmit","className","onSubmit","e","target","type","placeholder","min","Date","toLocaleDateString","split","month","day","year","padStart","getTodayString","Tile","info","array","Object","values","data","index","TileList","AppointmentsPage","props","useState","preventDefault","addAppointment","appointments","ContactForm","setName","setPhone","email","setEmail","required","pattern","ContactsPage","addContact","duplicate","setDuplicate","useEffect","App","setContacts","setAppointments","ROUTES","to","activeClassName","exact","path","newContact","prev","newAppointment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f63bc9d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const ContactPicker = ({ contacts, onChange }) => {\r\n  return (\r\n    <>\r\n      <label htmlFor=\"contacts\"></label>\r\n      <select\r\n        name=\"contacts\"\r\n        id=\"contacts\"\r\n        onChange={onChange}\r\n        key={-1}\r\n      >\r\n        <option key=\"default\" value=\"no contact selected\">\r\n          No contact selected\r\n        </option>\r\n        {contacts.map((contact) => {\r\n          return (\r\n            <option key={contact.phone} value={contact.contactName}>\r\n              {contact.contactName}\r\n            </option>\r\n          );\r\n        })}\r\n      </select>\r\n    </>\r\n  );\r\n};","import React from \"react\";\r\nimport { ContactPicker } from \"../contactPicker/ContactPicker\";\r\n\r\nexport const AppointmentForm = ({\r\n  contacts,\r\n  title,\r\n  setTitle,\r\n  contact,\r\n  setContact,\r\n  date,\r\n  setDate,\r\n  time,\r\n  setTime,\r\n  handleSubmit,\r\n}) => {\r\n  // get todays date to be used as input min\r\n  const getTodayString = () => {\r\n    const [month, day, year] = new Date()\r\n      .toLocaleDateString(\"en-US\")\r\n      .split(\"/\");\r\n    return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className=\"AppointmentForm\" onSubmit={handleSubmit}>\r\n        <ContactPicker\r\n          contacts={contacts}\r\n          onChange={(e) => setContact(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          value={title}\r\n          placeholder=\"Title\"\r\n          onChange={(e) => setTitle(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"date\"\r\n          value={date}\r\n          min={getTodayString()}\r\n          onChange={(e) => setDate(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"time\"\r\n          value={time}\r\n          onChange={(e) => setTime(e.target.value)}\r\n        />\r\n        <button>Submit</button>\r\n      </form>\r\n    </>\r\n  );\r\n};","import React from \"react\";\r\n\r\nexport const Tile = ({info}) => {\r\n  const array = Object.values(info);\r\n  return (\r\n    <div className=\"tile-container\">\r\n      {array.map( (data, index) => {\r\n        if (index === 0 ) {\r\n          return <p className=\"tile-title\" key={index}>{data}</p>;\r\n        }\r\n          return <p className=\"tile\" key={index}>{data}</p>;\r\n        })\r\n      }   \r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Tile } from '../tile/Tile';\r\n\r\n// This components receive from appointments and contacts \r\nexport const TileList = ({array}) => {\r\n  \r\n  return (\r\n    <div>\r\n      {array.map( (info, index) => <Tile info={info} key={index}/>)}\r\n    </div>\r\n  );\r\n};","import React, { useState } from \"react\";\r\nimport { AppointmentForm } from \"../../components/appointmentForm/AppointmentForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const AppointmentsPage = (props) => {\r\n  /* Define state variables for appointment info */\r\n  const [title, setTitle] = useState(\"\");\r\n  const [contact, setContact] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [time, setTime] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Add contact info\r\n    props.addAppointment(title, contact, date, time);\r\n    //clear data\r\n    setTitle(\"\");\r\n    setContact(\"\");\r\n    setDate(\"\");\r\n    setTime(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Appointment</h2>\r\n        <AppointmentForm\r\n          title={title}\r\n          setTitle={setTitle}\r\n          contact={contact}\r\n          setContact={setContact}\r\n          date={date}\r\n          setDate={setDate}\r\n          time={time}\r\n          setTime={setTime}\r\n          handleSubmit={handleSubmit}\r\n          contacts={props.contacts}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Appointments</h2>\r\n        <TileList array={props.appointments} />\r\n      </section>\r\n    </div>\r\n  );\r\n};","import React from \"react\";\r\n\r\nexport const ContactForm = ({\r\n  contacts,\r\n  name,\r\n  setName,\r\n  phone,\r\n  setPhone,\r\n  email,\r\n  setEmail,\r\n  handleSubmit\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {/* name input */}\r\n    <input type=\"text\" placeholder=\"name\" value={name}\r\n        onChange={({target}) => {setName(target.value)}}\r\n        required />\r\n      {/* phone numer input */}\r\n      <input type=\"number\" placeholder='phone number'\r\n       pattern=\"[1-9][0-9]{2}-[1-9][0-9]{2}-[0-9]{4}\" value={phone} onChange={({ target }) => { setPhone(target.value) }} required />\r\n      \r\n      {/* ^((\\+\\d{1,3}(-| )?\\(?\\d\\)?(-| )?\\d{1,3})|(\\(?\\d{2,3}\\)?))(-| )?(\\d{3,4})(-| )?(\\d{4})(( x| ext)\\d{1,5}){0,1}$ */}\r\n      {/* email input  */}\r\n\r\n      <input type=\"text\" placeholder='email' \r\n        value={email} onChange={({ target }) => { setEmail(target.value) }} required />\r\n      \r\n       <button>Submit</button>\r\n    </form>\r\n  );\r\n};\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {ContactForm\r\n}from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\nexport const ContactsPage = (props) => {\r\n\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n  const contacts = props.contacts;\r\n  const addContact = props.addContact;\r\n\r\n// local variables including boolean for duplication check\r\nconst [name, setName] = useState('');\r\nconst [phone, setPhone] = useState('');\r\nconst [email, setEmail] = useState('');\r\nconst [duplicate, setDuplicate] = useState(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n    if (!duplicate) {\r\n\r\n      addContact(name,phone, email);\r\n      // reseting values clearing the form\r\n      setName('');\r\n      setPhone('');\r\n      setEmail('');\r\n    }\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n  useEffect( () => {\r\n    for (const contact of contacts) {\r\n      if (name === contact.name) {\r\n        setDuplicate(true);\r\n      }\r\n      return false;\r\n    }\r\n  },[name,contacts]);\r\n//   const array1 = ['a', 'b', 'c'];\r\n// const lett = array1[1]\r\n// console.log(lett)\r\n// let duplicate = false;\r\n\r\n// for (const element of array1) {\r\n//   if(element === lett){\r\n//     duplicate = true\r\n//   }else{\r\n//      duplicate = false;\r\n//   }\r\n//   console.log(element);\r\n//   console.log(duplicate);\r\n// }\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n        <ContactForm \r\n         name={name}\r\n          phone={phone}\r\n          email={email}\r\n          setName={setName}\r\n          setPhone={setPhone}\r\n          setEmail={setEmail}\r\n          handleSubmit={handleSubmit} />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList\r\n          array={props.contacts}\r\n        />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React, {useState} from \"react\";\r\nimport { Switch, Route, Redirect, NavLink } from \"react-router-dom\";\r\n\r\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\r\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\r\n\r\n\r\nfunction App() {\r\n  //Define state variables for contacts and appointments \r\n  const [contacts, setContacts] =  useState([]);\r\n  const [appointments, setAppointments] = useState([]);\r\n\r\n  const ROUTES = {\r\n    CONTACTS: \"/contacts\",\r\n    APPOINTMENTS: \"/appointments\",\r\n  };\r\n\r\n  // Implement functions to add data to contacts and appointments\r\n  const addContact = (contactName, phone, email) => {\r\n    let newContact = {\r\n      contactName: contactName,\r\n      phone, \r\n      email,\r\n    };\r\n    setContacts((prev) => [...prev, newContact]);\r\n  };\r\n\r\n    const addAppointment = (title, contact, date, time) => {\r\n      let newAppointment = {\r\n        title,\r\n        contact,\r\n        date,\r\n        time,\r\n      };\r\n      setAppointments((prev) => [...prev, newAppointment]);\r\n    };\r\n\r\n  return (\r\n    <>\r\n      <nav>\r\n        <NavLink to={ROUTES.CONTACTS} activeClassName=\"active\">\r\n          Contacts\r\n        </NavLink>\r\n        <NavLink to={ROUTES.APPOINTMENTS} activeClassName=\"active\">\r\n          Appointments\r\n        </NavLink>\r\n      </nav>\r\n      <main>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to={ROUTES.CONTACTS} />\r\n          </Route>\r\n          <Route path={ROUTES.CONTACTS}>\r\n             {/* Add props to ContactsPage */}\r\n            <ContactsPage contacts={contacts} addContact={addContact}/>  \r\n          </Route>\r\n          <Route path={ROUTES.APPOINTMENTS}>\r\n            {/* Add props to AppointmentsPage */}\r\n            <AppointmentsPage appointments={appointments} addAppointment={addAppointment} contacts={contacts}/>\r\n          </Route>\r\n        </Switch>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport \"./index.css\";\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}